Практична робота з розв'язання двомірної задачі теплопровідності з використанням MPI
Автор: Денис Дацко

1. Встановлення та запуск

########## Встановлення

Для запуску потрібно виконати скрипт install.sh:
$ chmod +x install.sh
$ ./install.sh

Або виконати:
$ mkdir build
$ cd build
$ cmake .. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
$ make

В директорії bin створиться виконуваний файл mpi_lab


########## Запуск

Для запуску потрібно вказати 2 або 3 аргументи з командного рядка:
$ mpirun -np X ./mpi_lab <шлях до файлу конфігурації> <шлях до файлу з початковою матрицею> [<шлях до файлу, в який потрібно записати анімацію>]

Якщо третього аргументу немає - кінцеву анімацію буде записано у файл "animation.gif"

2. Файл конфігурації
Файл конфігурації складається з рядків вигляду

ключ=значення

УВАГА!!! Пробіли до і після дорівнює ставити не варто
Допускаються пусті рядки та рядки, першим символом яких є # як коментарі

Обов'язкові ключі у файлі конфігкрації:

delta_t, delta_x, delta_y, cycles, cycles_per_image

Де
delta_t - час, що "проходить" між кожною зміною матриці (в секундах)
delta_x - відстань між елементами матриці по горизонталі (в метрах)
delta_y - відстань між елементами матриці по вертикалі (в метрах)
cycles - кількість обрахунків нової матриці
cycles_per_image - кількість ітерацій, через яку збережеться картинка для анімації


!!!Також, треба вказати поле "alpha" або поля "k", "ro", "c" , де

alpha = k / (ro * c)    // В  м^2 / c   |  (метр)^2 / секунда
-------------------------
k - коефіціент теплопровідності     // в      Вт / (м * К)   || Ват / (метр * Кельвін)
ro - густина речовини               // !!В    кг / (м^3)
c - питома теплоємність             // В      Дж / (кг * К)  || Джоуль / (кілограм * Кельвін)


3. Файл з початковими значеннями
Файл має бути в наступному форматі:
- В першому рядку 2 числа - кількість рядків (m) та ствпців (n) матриці
- n * m елементів матриці
E.g.:
####################
2 3
1 2 3
1.0 4.0 5.67
####################

4. Анімація
- В анімації буде n * m пікселів (на кожну клітинку матриці)
- Синій колір - температура найхолоднішого пікселя в початковій матриці
- Червоний колір - темеература найтеплішого пікселя в початковій матриці
- Всі решта кольори - рівномірно розподілені між ними в залежності від температури


5. Коментарі щодо реалізації:
- Всі картинки зберігаються в оперативній пам'яті до створення анімації з них усіх. Я
    вирішив, що їх все рівно потрібно буде завантажувати з диску для створення кінцевої анімації,
    тому, якщо вони не влізуть в пам'ять, то я це не зміню ніяк. А картинок зазвичай небагато.
    А якщо багато - то анімація дуже довга і нецікава.
- Тому, враховуючи, що картинок буде (cycles / cycles_per_image), не робіть їх дуже багато4
- Відповідно, "час моделювання" = cycles * delta_t
- У моїй реалізації з диском працює тільки один процес - з індексом 0. Всі решта керуються ним.
    Я вирішив, що немає сенсу всім одночасно читати з диску і обробляти конфігураційний фийл,
    а краще, щоб всі крім 0-го просто отриумвали і виконували свою роботу
- Поділ матриці відбувається по рядках
- Якщо кожному процесу дістяється менше ніж 2 рядка, то програма завершується з помилкою. Треба використати менше процесів
- В двовимірному масиві я реалізував тільки те, що мені було потрібним
- Перед початком обрахунків перевіряється умова стабільності фон Неймана. Якщо вона не задоволена - програма завершується

